{"version":3,"sources":["reportWebVitals.js","config.ts","components/HTMLRenderComponent.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","enviroments","id","title","url","key","HTMLRender","this","state","response","json","JSON","parse","console","log","Array","isArray","map","item","index","tittel","dangerouslySetInnerHTML","__html","tekst","name","data","rasjonale","style","fontWeight","intro","eier","forstPublisert","dokumentType","gruppeId","koder","ICPC","ICD","tekniskeData","infoId","infoType","subType","HapiId","colSpan","renderLinks","links","attachments","sistImportertTilHapi","rel","type","href","strukturId","React","Component","MyPage","props","mySubmitHandler","event","preventDefault","enviroment","setEnviroments","find","o","uglyId","codeSystem","code","setState","fetch","method","headers","responseHandler","stringify","myChangeHandler","target","value","ChangeHandlerCode","ChangeHandlerCodeSystem","ChangeHandlerEnviroment","records","onSubmit","onChange","evt","autoComplete","placeholder","className","select","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6961c633.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const codeSystems = [\n    {\n      id: \"ICPC-2\",\n      title: \"ICPC-2\",\n    },\n    {\n      id: \"ICD-10\",\n      title: \"ICD-10\",\n    },\n    \n    {\n      id: \"ATC\",\n      title: \"ATC\",\n    },\n\n    {\n      id: \"SNOMED-CT\",\n      title: \"SNOMED-CT\",\n    },\n  ]\n\n \n  \n  export const enviroments = [\n    {\n      id: \"test\",\n      title: \"Test\",\n      url: \"https://helsedirektoratet-bt.azure-api.net/innhold/innhold\",\n      key: \"143e448642124111b8c5e4d7e00d1975\",\n    },\n    {\n      id: \"qa\",\n      title: \"QA\",\n      url: \"https://helsedirektoratet-at.azure-api.net/innhold/innhold\",\n      key: \"4f044f75aeea46529ad158cf910e800c\",\n    },\n    {\n      id: \"prod\",\n      title: \"Production\",\n      url: \"https://api.helsedirektoratet.no/innhold/innhold\",\n      key: \"89b72a3ad5cf4723b3f489c3eb4d82a1\",\n    },\n  ]\n\n","import React from 'react';\nimport { CollapsibleComponent, CollapsibleHead, CollapsibleContent } from \"react-collapsible-component\";\n\n\nclass HTMLRender extends React.Component {\n\n  renderJson() {\n    if (this.state.response) {\n      let json = JSON.parse(this.state.response);\n      console.log(json);\n\n      if (Array.isArray(json)) {\n        console.log(json);\n\n        return json.map((item, index) =>\n          <div key={index}>\n\n            <div><h1>{item.tittel}</h1></div>\n            <div dangerouslySetInnerHTML={{ __html: item.tekst }}></div>\n            <CollapsibleComponent name={item.id}> \n              {item.data.rasjonale != null ? <CollapsibleHead><h2>Rasjonale</h2></CollapsibleHead>:''} \n\n              <CollapsibleContent>\n                <div dangerouslySetInnerHTML={{ __html: item.data.rasjonale }}></div>\n              </CollapsibleContent>\n\n              <CollapsibleHead><h2>Metadata</h2></CollapsibleHead>\n              <CollapsibleContent>\n\n                <table><tbody>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Id</td><td>{item.id ? item.id : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>intro</td><td>{item.intro ? item.id : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Owner</td><td>{item.eier ? item.eier : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>FirstPublicated</td><td>{item.forstPublisert ? item.forstPublisert : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>DokumentType</td><td>{item.dokumentType ? item.dokumentType : ''}</td>\n                  </tr>\n\n                </tbody></table>\n\n              </CollapsibleContent>\n            </CollapsibleComponent>\n\n          </div>);\n      } else {\n        //if object (checking)\n        let item = json;\n        console.log(Array.isArray(item));\n        console.log('object');\n\n        return (\n          <div>\n\n\n            <div><h1>{item.tittel}</h1></div>\n            <div dangerouslySetInnerHTML={{ __html: item.tekst }}></div>\n            <CollapsibleComponent>\n            {item.data.rasjonale != null ? <CollapsibleHead><h2>Rasjonale</h2></CollapsibleHead>:null} \n            <CollapsibleContent><div dangerouslySetInnerHTML={{ __html: item.data.rasjonale }}></div></CollapsibleContent>\n              <CollapsibleHead><h2>Metadata</h2></CollapsibleHead>\n\n              <CollapsibleContent>\n                <table><tbody>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Id</td><td>{item.id ? item.id : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Owner</td><td>{item.eier ? item.eier : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>FirstPublicated</td><td>{item.forstPublisert ? item.forstPublisert : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>intro</td><td>{item.intro ? item.intro : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>grouppeID</td><td>{item.gruppeId ? item.gruppeId : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Code system</td><td>{item.koder.ICPC - 2}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Code system</td><td>{item.koder.ICD - 10}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Technical data</td><td>{item.tekniskeData ? '' : 'none'}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Info Id</td><td>{(item.tekniskeData && item.tekniskeData.infoId) ? item.tekniskeData.infoId : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Info type</td><td>{(item.tekniskeData && item.tekniskeData.infoType) ? item.tekniskeData.infoType : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Subtype</td><td>{(item.tekniskeData && item.tekniskeData.subType) ? item.tekniskeData.subType : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>HAPI id</td><td>{(item.tekniskeData && item.tekniskeData.HapiId) ? item.tekniskeData.HapiId : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td colSpan=\"2\">{this.renderLinks(item.links)}</td>\n                  </tr>\n\n                </tbody></table>\n\n                <table><tbody>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Attachments</td><td>{item.attachments ? item.attachments : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Document type</td><td>{item.dokumentType ? item.dokumentType : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Last import to HAPI</td><td>{item.sistImportertTilHapi ? item.sistImportertTilHapi : ''}</td>\n                  </tr>\n\n                </tbody></table>\n              </CollapsibleContent>\n            </CollapsibleComponent>\n\n          </div>);\n      }\n    }\n  return '';\n  }\n\n\n  renderLinks(links) {\n    if (links != null)\n    return links.map((item, index) =>\n      <div key={index}>\n\n        <table><tbody>\n\n          <tr>\n            <td style={{ fontWeight: \"bold\" }}>Rel</td><td>{item.rel ? item.rel : ''}</td>\n          </tr>\n\n          <tr>\n            <td style={{ fontWeight: \"bold\" }}>Type</td><td>{item.type ? item.type : ''}</td>\n          </tr>\n\n          <tr>\n            <td>Href</td><td>{item.href ? item.href : ''}</td>\n          </tr>\n\n          <tr>\n            <td>Struktur Id</td><td>{item.strukturId ? item.strukturId : ''}</td>\n          </tr>\n\n        </tbody></table>\n\n      </div>);\n  }\n\n\n  render() {\n    return <div><h1>{HTMLRender}</h1></div>\n  }\n\n}\n\nexport default HTMLRender;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n//import { CollapsibleComponent, CollapsibleHead, CollapsibleContent } from \"react-collapsible-component\";\nimport { enviroments } from './config.ts';\nimport HTMLRender from './components/HTMLRenderComponent.js';\n\nclass MyPage extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      uglyId: '',\n      codeSystem: '',\n      code: '',\n      url: '',\n      response: '',\n      records: [],\n      enviroment: 'prod',\n\n    };\n  \n  }\n\n  \n\n  mySubmitHandler = (event) => {\n    event.preventDefault();\n\n    //const urlAddress = 'https://api.helsedirektoratet.no/innhold/innhold';\n    const enviroment = this.state.enviroment;\n    let setEnviroments = enviroments.find(o => o.id === enviroment);\n\n    let url = setEnviroments.url;\n    let key = setEnviroments.key\n    if (this.state.uglyId) {\n      url += '/' + this.state.uglyId;\n    } else {\n      url += '?kodeverk=' + this.state.codeSystem + \"&kode=\" + this.state.code;\n    } \n    \n   \n\n    this.setState({ url: url });\n\n    fetch(url,\n      {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Ocp-Apim-Subscription-Key': key\n        }\n      }\n    )\n      .then(response => response.json())\n      .then(data => this.responseHandler(data));\n  }\n\n  responseHandler = (data) => {\n    if (data) {\n      this.setState({\n        response: JSON.stringify(data, null, 2)\n      });\n    }\n  }\n\n  myChangeHandler = (event) => {\n    this.setState({\n      uglyId: event.target.value\n    });\n  }\n  ChangeHandlerCode = (event) => {\n    this.setState({\n      code: event.target.value\n    });\n  }\n  ChangeHandlerCodeSystem = (event) => {\n    this.setState({\n      codeSystem: event.target.value\n    });\n  }\n  ChangeHandlerEnviroment = (event) => {\n    this.setState({\n      enviroment: event.target.value\n    \n    });\n  }\n\n /* renderJson() {\n    if (this.state.response) {\n      let json = JSON.parse(this.state.response);\n      console.log(json);\n\n      if (Array.isArray(json)) {\n        console.log(json);\n        return json.map((item, index) =>\n          <div key={index}>\n\n\n            <div><h1>{item.tittel}</h1></div>\n            <div dangerouslySetInnerHTML={{ __html: item.tekst }}></div>\n            <CollapsibleComponent name={item.id}> \n            {item.data.rasjonale != null ? <CollapsibleHead><h2>Rasjonale</h2></CollapsibleHead>:null} \n              <CollapsibleContent><div dangerouslySetInnerHTML={{ __html: item.data.rasjonale }}></div>\n              </CollapsibleContent>\n      \n              <CollapsibleHead><h2>Metadata</h2></CollapsibleHead>\n              <CollapsibleContent>\n                <table><tbody>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Id</td><td>{item.id ? item.id : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>intro</td><td>{item.intro ? item.id : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Owner</td><td>{item.eier ? item.eier : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>FirstPublicated</td><td>{item.forstPublisert ? item.forstPublisert : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>DokumentType</td><td>{item.dokumentType ? item.dokumentType : ''}</td>\n                  </tr>\n\n                </tbody></table>\n                </CollapsibleContent>\n                </CollapsibleComponent>\n\n          </div>);\n      } else {\n        //if object (checking)\n        let item = json;\n        console.log(Array.isArray(item));\n        console.log('object');\n\n        return (\n          <div>\n\n\n            <div><h1>{item.tittel}</h1></div>\n            <div dangerouslySetInnerHTML={{ __html: item.tekst }}></div>\n            <CollapsibleComponent>\n            {item.data.rasjonale != null ? <CollapsibleHead><h2>Rasjonale</h2></CollapsibleHead>:null} \n             <CollapsibleContent><div dangerouslySetInnerHTML={{ __html: item.data.rasjonale }}></div></CollapsibleContent>\n              <CollapsibleHead><h2>Metadata</h2></CollapsibleHead>\n              <CollapsibleContent>\n                <table><tbody>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Id</td><td>{item.id ? item.id : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Owner</td><td>{item.eier ? item.eier : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>FirstPublicated</td><td>{item.forstPublisert ? item.forstPublisert : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>intro</td><td>{item.intro ? item.intro : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>grouppeID</td><td>{item.gruppeId ? item.gruppeId : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Code system</td><td>{item.koder.ICPC - 2}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Code system</td><td>{item.koder.ICD - 10}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Technical data</td><td>{item.tekniskeData ? '' : 'none'}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Info Id</td><td>{(item.tekniskeData && item.tekniskeData.infoId) ? item.tekniskeData.infoId : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Info type</td><td>{(item.tekniskeData && item.tekniskeData.infoType) ? item.tekniskeData.infoType : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Subtype</td><td>{(item.tekniskeData && item.tekniskeData.subType) ? item.tekniskeData.subType : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>HAPI id</td><td>{(item.tekniskeData && item.tekniskeData.HapiId) ? item.tekniskeData.HapiId : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td colSpan=\"2\">{this.renderLinks(item.links)}</td>\n                  </tr>\n\n                </tbody></table>\n\n                <table><tbody>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Attachments</td><td>{item.attachments ? item.attachments : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Document type</td><td>{item.dokumentType ? item.dokumentType : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Last import to HAPI</td><td>{item.sistImportertTilHapi ? item.sistImportertTilHapi : ''}</td>\n                  </tr>\n\n                </tbody></table>\n              </CollapsibleContent>\n            </CollapsibleComponent>\n\n          </div>);\n      }\n    }\n    return '';\n  }*/\n\n\n /* renderLinks(links) {\n    return links.map((item, index) =>\n      <div key={index}>\n\n        <table><tbody>\n\n          <tr>\n            <td style={{ fontWeight: \"bold\" }}>Rel</td><td>{item.rel ? item.rel : ''}</td>\n          </tr>\n\n          <tr>\n            <td style={{ fontWeight: \"bold\" }}>Type</td><td>{item.type ? item.type : ''}</td>\n          </tr>\n\n          <tr>\n            <td>Href</td><td>{item.href ? item.href : ''}</td>\n          </tr>\n\n          <tr>\n            <td>Struktur Id</td><td>{item.strukturId ? item.strukturId : ''}</td>\n          </tr>\n\n\n        </tbody></table>\n\n      </div>);\n  }\n*/\n\n  render() {\n    return (\n      <div>\n\n        <form onSubmit={this.mySubmitHandler}>\n        <select name=\"enviroment\" id=\"enviroment\"\n            onChange={evt => this.ChangeHandlerEnviroment(evt)}\n          >\n         <option value=\"prod\">Production</option>\n            <option value=\"test\">Test</option>\n            <option value=\"qa\">QA</option>\n            \n          </select>\n          <p>Please provide either HAPI-id or code from a code system</p>\n          <input\n            id=\"id\"\n            type='text'\n            autoComplete=\"on\"\n            placeholder=\"HAPI-id\"\n            value={this.state.uglyId}\n            onChange={evt => this.myChangeHandler(evt)}\n          />\n\n          <span className=\"marginRight\">or</span>\n\n          <select name=\"codeSystem\" id=\"codeSystem\"\n            onChange={evt => this.ChangeHandlerCodeSystem(evt)}\n          >\n            <option value=\"\" select=\"default\">Choose code system</option>\n            <option value=\"ICD-10\">ICD-10</option>\n            <option value=\"ICPC-2\">ICPC-2</option>\n            <option value=\"ATC\">ATC</option>\n            <option value=\"SNOMED-CT\">SNOMED-CT</option>\n          </select>\n\n          <input\n            type='text'\n            autoComplete=\"on\"\n            id=\"code\"\n            placeholder=\"Code\"\n            value={this.state.code}\n            onChange={evt => this.ChangeHandlerCode(evt)}\n          />\n\n          <input\n            type='submit'\n            value=\"поиск\"\n          />\n        </form>\n\n\n       <div><HTMLRender/></div>\n        <div>here is the JSON part</div>\n        <div><pre>{this.state.response}</pre></div>\n        <div><pre><h4>{this.state.url}</h4></pre></div>\n\n      </div>\n    );\n  }\n\n}\n\nReactDOM.render(<MyPage />, document.getElementById('root'));\n\nreportWebVitals();"],"sourceRoot":""}