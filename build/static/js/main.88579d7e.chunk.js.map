{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MyPage","props","mySubmitHandler","event","preventDefault","state","uglyId","fetch","method","headers","response","json","data","responseHandler","codeSystem","code","setState","JSON","stringify","myChangeHandler","target","value","ChangeHandlerCode","ChangeHandlerCodeSystem","onSubmit","this","id","type","autoComplete","placeholder","onChange","evt","class","React","Component","ReactDOM","render","document","getElementById"],"mappings":"6MAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCgGRQ,E,kDAEJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAuBRC,gBAAkB,SAACC,GACjBA,EAAMC,iBACiB,MAAnB,EAAKC,MAAMC,OAGfC,MAAM,oDAAsD,EAAKF,MAAMC,OACvE,CACEE,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,4BAA8B,sCAMjCf,MAAK,SAAAgB,GAAQ,OAAIA,EAASC,UAC1BjB,MAAK,SAAAkB,GAAI,OAAI,EAAKC,gBAAgBD,MAInCL,MAAM,6DAA+D,EAAKF,MAAMS,WAAa,SAAW,EAAKT,MAAMU,KACnH,CACEP,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,4BAA8B,sCAMjCf,MAAK,SAAAgB,GAAQ,OAAIA,EAASC,UAC1BjB,MAAK,SAAAkB,GAAI,OAAI,EAAKC,gBAAgBD,OAzDlB,EA8DnBC,gBAAkB,SAACD,GACdA,GACD,EAAKI,SAAS,CACZN,SAAUO,KAAKC,UAAUN,EAAM,KAAM,MAjExB,EAsEnBO,gBAAkB,SAAChB,GACjB,EAAKa,SAAS,CACZV,OAAQH,EAAMiB,OAAOC,SAxEN,EA2EnBC,kBAAoB,SAACnB,GACnB,EAAKa,SAAS,CACZD,KAAMZ,EAAMiB,OAAOC,SA7EJ,EAgFnBE,wBAA0B,SAACpB,GACzB,EAAKa,SAAS,CACZF,WAAYX,EAAMiB,OAAOC,SA/E3B,EAAKhB,MAAQ,CACXC,OAAQ,GACRI,SAAU,IAEZ,EAAKL,MAAQ,CACXS,WAAY,GACZJ,SAAU,IAEZ,EAAKL,MAAQ,CACXU,KAAM,GACNL,SAAU,IAbK,E,0CAsFnB,WAAU,IAAD,OACP,OACE,gCACE,uBAAMc,SAAUC,KAAKvB,gBAArB,UACE,yFACA,uBACEwB,GAAG,KACHC,KAAK,OACLC,aAAa,MACbC,YAAY,UACZR,MAAOI,KAAKpB,MAAMC,OAClBwB,SAAU,SAAAC,GAAG,OAAI,EAAKZ,gBAAgBY,MAExC,sBAAMC,MAAM,cAAZ,gBACE,uBACAN,GAAG,aACHC,KAAK,OACLC,aAAa,MACbC,YAAY,cACZR,MAAOI,KAAKpB,MAAMS,WAClBgB,SAAU,SAAAC,GAAG,OAAI,EAAKR,wBAAwBQ,MAE/C,uBACCJ,KAAK,OACLC,aAAa,MACbF,GAAG,OACHG,YAAY,OACZR,MAAOI,KAAKpB,MAAMU,KAClBe,SAAU,SAAAC,GAAG,OAAI,EAAKT,kBAAkBS,MAE1C,uBACEJ,KAAK,SACLN,MAAM,sCAGV,8BAAK,8BAAMI,KAAKpB,MAAMK,oB,GA3HTuB,IAAMC,WAkI3BC,IAASC,OAAO,cAAC,EAAD,IAAYC,SAASC,eAAe,SAEpD/C,M","file":"static/js/main.88579d7e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n//import App from './App';\n//import reportWebVitals from './reportWebVitals';\n\n/*const mysecondelement = (\n<ul>\n  <h1>Put your request here:</h1>\n  <textarea for=\"inputId\" id=\"inputId\" placeholder=\"yes, here...\"></textarea>\n  <button onclick=\"activateLasers()\">Send the request</button>\n</ul>\n);\n*/\n\n\n//const myfirstelement = <button onclick=\"activateLasers()\">Send</button>\n\n /* const textcomponent = () => (\n  <div>\n    <h1>Put your request here:</h1>\n  </div>\n);\n\nconst areacomponent = () => (\n  <div>\n    <textarea for=\"inputId\" id=\"inputId\" placeholder=\"yes, here...\"></textarea>\n  </div>\n);\n\nconst buttoncomponent = () => (\n  <div>\n    <button onclick=\"activateLasers()\">Send the request</button>\n  </div>\n);\n\nReactDOM.render(\n  <div>\n    <textcomponent />\n    <areacomponent />\n    <buttoncomponent />\n  </div>, document.getElementById(\"root\")\n);\n*/\n\n\n/*\nconst buttoncomponent = () => {\n  const handleClick = () => console.log('here');\n    return (\n      <div>\n        <button onClick={handleClick}>Click here:</button>\n      </div>\n  );\n};\n\nconst TextAreaComponent = () => {\n  const [textAreaComponentValue, setTextAreaComponentValue] = useState<string>(\"\");\n    return (\n      <textarea \n        value={textAreaComponentValue} \n        onChange={(\n          ev: React.ChangeEvent<HTMLTextAreaElement>,\n          ) : void => setTextAreaComponentValue(ev.target.value)}\n      />\n    );\n};\n\nconst textcomponent = () =>\n  <p>Put here</p>\n;\n\nReactDOM.render(\n  <div>\n    <textcomponent />\n    <areacomponent />\n    <buttoncomponent />\n  </div>,\n  document.querySelector('#root')\n);\n*/\n\n\n/*\nReactDOM.render(\n  const mysecondelement = <h1>Send</h1>;\n, document.getElementById('root')\n  );*/\n\n  /*<React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n*/\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\nclass MyPage extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = { \n      uglyId: '',\n      response: ''\n    };\n    this.state = { \n      codeSystem: '',\n      response: ''\n    };\n    this.state = { \n      code: '',\n      response: ''\n    };\n\n  }\n\n  /* componentDidMount() {\n    fetch('https://api.helsedirektoratet.no/innhold/innhold?q=react')\n        .then(response => response.json())\n        .then(data => this.setState({ uglyId: data.total }) );\n  }; */\n  \n  mySubmitHandler = (event) => {\n    event.preventDefault();\n    if (this.state.uglyId!=null) {\n    //alert(\"You are sending \" + this.state.uglyId);\n\n    fetch('https://api.helsedirektoratet.no/innhold/innhold/' + this.state.uglyId,\n    {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Ocp-Apim-Subscription-Key' : '89b72a3ad5cf4723b3f489c3eb4d82a1'\n      }\n    }\n    )\n  \n    \n    .then(response => response.json())\n    .then(data => this.responseHandler(data));\n  }\n\n  else {\n    fetch('https://api.helsedirektoratet.no/innhold/innhold?kodeverk=' + this.state.codeSystem + \"&kode=\" + this.state.code,\n    {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Ocp-Apim-Subscription-Key' : '89b72a3ad5cf4723b3f489c3eb4d82a1'\n      }\n    }\n    )\n  \n    \n    .then(response => response.json())\n    .then(data => this.responseHandler(data));\n  }\n\n  }\n\n  responseHandler = (data) => {\n    if(data) {\n      this.setState({\n        response: JSON.stringify(data, null, 2)\n      });\n    }\n  }\n\n  myChangeHandler = (event) => {\n    this.setState({\n      uglyId: event.target.value\n    });\n  }\n  ChangeHandlerCode = (event) => {\n    this.setState({\n      code: event.target.value\n    });\n  }\n  ChangeHandlerCodeSystem = (event) => {\n    this.setState({\n      codeSystem: event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.mySubmitHandler}>\n          <p>Please provide either HAPI-id or code from a code system</p>\n          <input\n            id=\"id\"\n            type='text'\n            autoComplete=\"off\"\n            placeholder=\"HAPI-id\"\n            value={this.state.uglyId}\n            onChange={evt => this.myChangeHandler(evt)}\n          />\n          <span class=\"marginRight\">or</span>\n            <input\n            id=\"codeSystem\"\n            type='text'\n            autoComplete=\"off\"\n            placeholder=\"Code system\"\n            value={this.state.codeSystem}\n            onChange={evt => this.ChangeHandlerCodeSystem(evt)}\n          />\n           <input\n            type='text'\n            autoComplete=\"off\"\n            id=\"code\"\n            placeholder=\"Code\"\n            value={this.state.code}\n            onChange={evt => this.ChangeHandlerCode(evt)}\n          />\n          <input\n            type='submit'\n            value=\"поиск\"\n          />\n        </form>\n        <div><pre>{this.state.response}</pre></div>\n      </div>\n    );\n  }\n\n}\n\nReactDOM.render(<MyPage />, document.getElementById('root'));\n\nreportWebVitals();"],"sourceRoot":""}