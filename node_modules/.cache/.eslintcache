[{"/Users/hannakhonskaya/ReactProjects/conteir-HAPI/HAPI/src/index.js":"1","/Users/hannakhonskaya/ReactProjects/conteir-HAPI/HAPI/src/reportWebVitals.js":"2","/Users/hannakhonskaya/ReactProjects/conteir-HAPI/HAPI/src/config.ts":"3","/Users/hannakhonskaya/ReactProjects/conteir-HAPI/HAPI/src/components/htmlRenderComponent.jsx":"4","/Users/hannakhonskaya/ReactProjects/conteir-HAPI/HAPI/src/components/NewPage.jsx":"5"},{"size":7892,"mtime":1617919323905,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1617021013667,"results":"8","hashOfConfig":"7"},{"size":997,"mtime":1617813066749,"results":"9","hashOfConfig":"7"},{"size":6598,"mtime":1617801801002,"results":"10","hashOfConfig":"7"},{"size":856,"mtime":1617947537620,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"4nz8pm",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hannakhonskaya/ReactProjects/conteir-HAPI/HAPI/src/index.js",["25"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport { enviroments } from './config.ts';\nimport HTMLRender from './components/htmlRenderComponent.jsx';\nimport { Spinner } from 'reactstrap';\nimport { Redirect } from 'react-router-dom'\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { NewPage } from './components/NewPage.jsx';\n\n\n\n\n\nclass MyPage extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showSpinner: false,\n      uglyId: '',\n      codeSystem: '',\n      code: '',\n      url: '',\n      response: '',\n      records: [],\n      enviroment: 'prod',\n      redirect: false\n\n    };\n\n  }\n\n  mySubmitHandler = (event) => {\n    event.preventDefault();\n\n    this.setState({ response: '' });\n\n    //const urlAddress = 'https://api.helsedirektoratet.no/innhold/innhold';\n    const enviroment = this.state.enviroment;\n    let setEnviroments = enviroments.find(o => o.id === enviroment);\n\n    let url = setEnviroments.url;\n    let key = setEnviroments.key\n    if (this.state.uglyId) {\n      url += '/' + this.state.uglyId;\n    } else if(this.state.codeSystem && this.state.code) {\n      url += '?kodeverk=' + this.state.codeSystem + \"&kode=\" + this.state.code;\n    } else {\n      alert(\"Neither HAPI-id nor Code defined!\")\n      return;\n    }\n\n\n    this.setState({ url: url });\n    this.setState({ showSpinner: true });\n\n    fetch(url,\n      {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Ocp-Apim-Subscription-Key': key\n        }\n      }\n    )\n      .then(response => response.json())\n      .then(data => {\n        this.responseHandler(data);\n        this.setState({ showSpinner: false });\n      }, () => this.setState({ showSpinner: false }))\n     \n      ;\n  }\n\n  responseHandler = (data) => {\n    if (data) {\n      this.setState({\n        response: JSON.stringify(data, null, 2)\n      });\n    } \n  }\n\n  myChangeHandler = (event) => {\n    this.setState({\n      uglyId: event.target.value\n    });\n  }\n  ChangeHandlerCode = (event) => {\n    this.setState({\n      code: event.target.value\n    });\n  }\n  ChangeHandlerCodeSystem = (event) => {\n    this.setState({\n      codeSystem: event.target.value\n    });\n  }\n  ChangeHandlerEnviroment = (event) => {\n    this.setState({\n      enviroment: event.target.value\n\n    });\n  }\n\n  /*setRedirect = () => {\n    this.setState({\n      redirect: true\n    })\n  }\n\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      return (\n      <Router>\n        <div>\n          <Switch>\n            <Route path=\"/\" component = {Home}>\n             <Redirect to='/newpage' />\n            </Route>\n        </Switch>\n        </div>\n      </Router>\n      )\n    }\n  }\n\n*/\n\n  render() {\n    return (\n      <div>\n\n        <div className=\"jumbotron text-center\">\n          <h1>Search HAPI</h1>\n          <p>Get content from Helsedirektoratet</p> \n       \n         {/* <nav class=\"nav\"> \n        \n            <a class=\"nav-link\" href=\"/\">Home</a>\n            <a class=\"nav-link\" href=\"/newpage\">New page</a>\n            \n          </nav>\n         */}\n\n          {/*<nav>\n            <div className=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\n              <a className=\"nav-item nav-link active\" id=\"nav-home-tab\" data-toggle=\"tab\" href=\"/home\" role=\"tab\" aria-controls=\"nav-home\" aria-selected=\"true\">Home</a>\n              <a className=\"nav-item nav-link\" id=\"nav-newpage-tab\" data-toggle=\"tab\" href=\"/newpage\" role=\"tab\" aria-controls=\"nav-newpage\" aria-selected=\"false\">New page</a>\n            </div>\n          </nav>\n          <div className=\"tab-content\" id=\"nav-tabContent\">\n            <div className=\"tab-pane fade show active\" id=\"nav-home\" role=\"tabpanel\" aria-labelledby=\"nav-home-tab\">...</div>\n            <div className=\"tab-pane fade\" id=\"nav-newpage\" role=\"tabpanel\" aria-labelledby=\"nav-newpage-tab\">...</div>\n          </div>*/}\n\n          <Router>\n      <div>\n          <nav>\n            <div className=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\n              <a className=\"nav-item nav-link active\" id=\"nav-home-tab\" data-toggle=\"tab\" href=\"/\" role=\"tab\" aria-controls=\"nav-home\" aria-selected=\"true\">Home</a>\n              <a className=\"nav-item nav-link\" id=\"nav-newpage-tab\" data-toggle=\"tab\" href=\"/newpage\" role=\"tab\" aria-controls=\"nav-newpage\" aria-selected=\"false\">New page</a>\n            </div>\n          </nav>\n\n        <hr />\n\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route exact path=\"/\">\n          </Route>\n          <Route path=\"/newpage\">\n            <NewPage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n\n          {/*<div>\n            <Router>\n            {this.renderRedirect}\n            <button onClick={this.setRedirect}>Redirect</button>\n            </Router>\n          </div>\n          */}\n        \n        </div>\n\n        <form onSubmit={this.mySubmitHandler}>\n\n            <div className=\"form-group\">\n              <select name=\"enviroment\" id=\"enviroment\"\n                onChange={evt => this.ChangeHandlerEnviroment(evt)}\n              >\n\n                <option value=\"prod\">Production</option>\n                <option value=\"test-bt\">Test BT</option>\n                <option value=\"test-st\">Test ST</option>\n                <option value=\"qa\">QA</option>\n\n              </select>  \n            </div>\n\n            <div className=\"row\">\n              <div className=\"col\">\n                <p>Please provide either HAPI-id or code from a code system</p>\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <input\n                id=\"id\"\n                type='text'\n                autoComplete=\"on\"\n                placeholder=\"HAPI-id\"\n                value={this.state.uglyId}\n                onChange={evt => this.myChangeHandler(evt)}\n              />\n            </div>\n\n            <div className=\"form-group\">\n                <span className=\"marginRight\">or</span>\n            </div>\n\n            <div className=\"form-group\">\n              <select name=\"codeSystem\" id=\"codeSystem\"\n                onChange={evt => this.ChangeHandlerCodeSystem(evt)}\n              >\n                <option value=\"\" select=\"default\">Choose code system</option>\n                <option value=\"ICD-10\">ICD-10</option>\n                <option value=\"ICPC-2\">ICPC-2</option>\n                <option value=\"ATC\">ATC</option>\n                <option value=\"SNOMED-CT\">SNOMED-CT</option>\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <input\n                type='text'\n                autoComplete=\"on\"\n                id=\"code\"\n                placeholder=\"Code\"\n                value={this.state.code}\n                onChange={evt => this.ChangeHandlerCode(evt)}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <input\n                type='submit'\n                value=\"Search\"\n                disabled={!(this.state.uglyId || (this.state.codeSystem && this.state.code))}\n              />\n            </div>\n\n             {this.state.showSpinner ? <Spinner color=\"success\" /> : null}      \n            \n        </form>\n\n        <div>\n          <HTMLRender data={this.state.response}/>\n        </div>\n\n        <div><pre>{this.state.response}</pre></div>\n        <div><pre><h4>{this.state.url}</h4></pre></div>\n        \n      </div>\n    );\n  };\n\n}\n\n\nReactDOM.render(<MyPage />, document.getElementById('root'));\n\nreportWebVitals();\n","/Users/hannakhonskaya/ReactProjects/conteir-HAPI/HAPI/src/reportWebVitals.js",[],["26","27"],"/Users/hannakhonskaya/ReactProjects/conteir-HAPI/HAPI/src/config.ts",[],["28","29"],"/Users/hannakhonskaya/ReactProjects/conteir-HAPI/HAPI/src/components/htmlRenderComponent.jsx",[],"/Users/hannakhonskaya/ReactProjects/conteir-HAPI/HAPI/src/components/NewPage.jsx",[],{"ruleId":"30","severity":1,"message":"31","line":9,"column":10,"nodeType":"32","messageId":"33","endLine":9,"endColumn":18},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-global-assign","no-unsafe-negation"]