{"ast":null,"code":"var _jsxFileName = \"/Users/hannakhonskaya/ReactProjects/conteir-HAPI/HAPI/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport { CollapsibleComponent, CollapsibleHead, CollapsibleContent } from \"react-collapsible-component\";\nimport { enviroments } from './config.ts';\nimport { Hanna } from './components/test.jsx';\nimport { HTMLRender } from './components/htmlRenderComponent.jsx';\nimport { RenderLinks } from './components/renderLinks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MyPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.mySubmitHandler = event => {\n      event.preventDefault(); //const urlAddress = 'https://api.helsedirektoratet.no/innhold/innhold';\n\n      const enviroment = this.state.enviroment;\n      let setEnviroments = enviroments.find(o => o.id === enviroment);\n      let url = setEnviroments.url;\n      let key = setEnviroments.key;\n\n      if (this.state.uglyId) {\n        url += '/' + this.state.uglyId;\n      } else {\n        url += '?kodeverk=' + this.state.codeSystem + \"&kode=\" + this.state.code;\n      }\n\n      this.setState({\n        url: url\n      });\n      fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Ocp-Apim-Subscription-Key': key\n        }\n      }).then(response => response.json()).then(data => this.responseHandler(data));\n    };\n\n    this.responseHandler = data => {\n      if (data) {\n        this.setState({\n          response: JSON.stringify(data, null, 2)\n        });\n      }\n    };\n\n    this.myChangeHandler = event => {\n      this.setState({\n        uglyId: event.target.value\n      });\n    };\n\n    this.ChangeHandlerCode = event => {\n      this.setState({\n        code: event.target.value\n      });\n    };\n\n    this.ChangeHandlerCodeSystem = event => {\n      this.setState({\n        codeSystem: event.target.value\n      });\n    };\n\n    this.ChangeHandlerEnviroment = event => {\n      this.setState({\n        enviroment: event.target.value\n      });\n    };\n\n    this.state = {\n      uglyId: '',\n      codeSystem: '',\n      code: '',\n      url: '',\n      response: '',\n      records: [],\n      enviroment: 'prod'\n    };\n  }\n\n  /* renderJson() {\n     if (this.state.response) {\n       let json = JSON.parse(this.state.response);\n       console.log(json);\n        if (Array.isArray(json)) {\n         console.log(json);\n         return json.map((item, index) =>\n           <div key={index}>\n  \n             <div><h1>{item.tittel}</h1></div>\n             <div dangerouslySetInnerHTML={{ __html: item.tekst }}></div>\n             <CollapsibleComponent name={item.id}> \n             {item.data.rasjonale != null ? <CollapsibleHead><h2>Rasjonale</h2></CollapsibleHead>:null} \n               <CollapsibleContent><div dangerouslySetInnerHTML={{ __html: item.data.rasjonale }}></div>\n               </CollapsibleContent>\n       \n               <CollapsibleHead><h2>Metadata</h2></CollapsibleHead>\n               <CollapsibleContent>\n                 <table><tbody>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>Id</td><td>{item.id ? item.id : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>intro</td><td>{item.intro ? item.id : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>Owner</td><td>{item.eier ? item.eier : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>FirstPublicated</td><td>{item.forstPublisert ? item.forstPublisert : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>DokumentType</td><td>{item.dokumentType ? item.dokumentType : ''}</td>\n                   </tr>\n                  </tbody></table>\n                 </CollapsibleContent>\n                 </CollapsibleComponent>\n            </div>);\n       } else {\n         //if object (checking)\n         let item = json;\n         console.log(Array.isArray(item));\n         console.log('object');\n          return (\n           <div>\n  \n             <div><h1>{item.tittel}</h1></div>\n             <div dangerouslySetInnerHTML={{ __html: item.tekst }}></div>\n             <CollapsibleComponent>\n             {item.data.rasjonale != null ? <CollapsibleHead><h2>Rasjonale</h2></CollapsibleHead>:null} \n              <CollapsibleContent><div dangerouslySetInnerHTML={{ __html: item.data.rasjonale }}></div></CollapsibleContent>\n               <CollapsibleHead><h2>Metadata</h2></CollapsibleHead>\n               <CollapsibleContent>\n                 <table><tbody>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>Id</td><td>{item.id ? item.id : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>Owner</td><td>{item.eier ? item.eier : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>FirstPublicated</td><td>{item.forstPublisert ? item.forstPublisert : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>intro</td><td>{item.intro ? item.intro : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>grouppeID</td><td>{item.gruppeId ? item.gruppeId : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>Code system</td><td>{item.koder.ICPC - 2}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>Code system</td><td>{item.koder.ICD - 10}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>Technical data</td><td>{item.tekniskeData ? '' : 'none'}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>Info Id</td><td>{(item.tekniskeData && item.tekniskeData.infoId) ? item.tekniskeData.infoId : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>Info type</td><td>{(item.tekniskeData && item.tekniskeData.infoType) ? item.tekniskeData.infoType : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>Subtype</td><td>{(item.tekniskeData && item.tekniskeData.subType) ? item.tekniskeData.subType : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>HAPI id</td><td>{(item.tekniskeData && item.tekniskeData.HapiId) ? item.tekniskeData.HapiId : ''}</td>\n                   </tr>\n                    <tr>\n                     <td colSpan=\"2\">{this.renderLinks(item.links)}</td>\n                   </tr>\n                  </tbody></table>\n                  <table><tbody>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>Attachments</td><td>{item.attachments ? item.attachments : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>Document type</td><td>{item.dokumentType ? item.dokumentType : ''}</td>\n                   </tr>\n                    <tr>\n                     <td style={{ fontWeight: \"bold\" }}>Last import to HAPI</td><td>{item.sistImportertTilHapi ? item.sistImportertTilHapi : ''}</td>\n                   </tr>\n                  </tbody></table>\n               </CollapsibleContent>\n             </CollapsibleComponent>\n            </div>);\n       }\n     }\n     return '';\n   }*/\n\n  /* renderLinks(links) {\n     return links.map((item, index) =>\n       <div key={index}>\n          <table><tbody>\n            <tr>\n             <td style={{ fontWeight: \"bold\" }}>Rel</td><td>{item.rel ? item.rel : ''}</td>\n           </tr>\n            <tr>\n             <td style={{ fontWeight: \"bold\" }}>Type</td><td>{item.type ? item.type : ''}</td>\n           </tr>\n            <tr>\n             <td>Href</td><td>{item.href ? item.href : ''}</td>\n           </tr>\n            <tr>\n             <td>Struktur Id</td><td>{item.strukturId ? item.strukturId : ''}</td>\n           </tr>\n  \n         </tbody></table>\n        </div>);\n   }\n  */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(HTMLRender, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RenderLinks, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Hanna, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.mySubmitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"enviroment\",\n          id: \"enviroment\",\n          onChange: evt => this.ChangeHandlerEnviroment(evt),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"prod\",\n            children: \"Production\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"test\",\n            children: \"Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"qa\",\n            children: \"QA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please provide either HAPI-id or code from a code system\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"id\",\n          type: \"text\",\n          autoComplete: \"on\",\n          placeholder: \"HAPI-id\",\n          value: this.state.uglyId,\n          onChange: evt => this.myChangeHandler(evt)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"marginRight\",\n          children: \"or\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"codeSystem\",\n          id: \"codeSystem\",\n          onChange: evt => this.ChangeHandlerCodeSystem(evt),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            select: \"default\",\n            children: \"Choose code system\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ICD-10\",\n            children: \"ICD-10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ICPC-2\",\n            children: \"ICPC-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ATC\",\n            children: \"ATC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"SNOMED-CT\",\n            children: \"SNOMED-CT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          autoComplete: \"on\",\n          id: \"code\",\n          placeholder: \"Code\",\n          value: this.state.code,\n          onChange: evt => this.ChangeHandlerCode(evt)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"\\u043F\\u043E\\u0438\\u0441\\u043A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: this.state.response\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: this.state.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(MyPage, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 332,\n  columnNumber: 17\n}, this), document.getElementById('root'));\nreportWebVitals();","map":{"version":3,"sources":["/Users/hannakhonskaya/ReactProjects/conteir-HAPI/HAPI/src/index.js"],"names":["React","ReactDOM","reportWebVitals","CollapsibleComponent","CollapsibleHead","CollapsibleContent","enviroments","Hanna","HTMLRender","RenderLinks","MyPage","Component","constructor","props","mySubmitHandler","event","preventDefault","enviroment","state","setEnviroments","find","o","id","url","key","uglyId","codeSystem","code","setState","fetch","method","headers","then","response","json","data","responseHandler","JSON","stringify","myChangeHandler","target","value","ChangeHandlerCode","ChangeHandlerCodeSystem","ChangeHandlerEnviroment","records","render","evt","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport { CollapsibleComponent, CollapsibleHead, CollapsibleContent } from \"react-collapsible-component\";\nimport { enviroments } from './config.ts';\nimport { Hanna} from './components/test.jsx';\nimport { HTMLRender} from './components/htmlRenderComponent.jsx';\nimport { RenderLinks } from './components/renderLinks';\n\n\nclass MyPage extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      uglyId: '',\n      codeSystem: '',\n      code: '',\n      url: '',\n      response: '',\n      records: [],\n      enviroment: 'prod',\n\n    };\n  \n  }\n\n  \n\n  mySubmitHandler = (event) => {\n    event.preventDefault();\n\n    //const urlAddress = 'https://api.helsedirektoratet.no/innhold/innhold';\n    const enviroment = this.state.enviroment;\n    let setEnviroments = enviroments.find(o => o.id === enviroment);\n\n    let url = setEnviroments.url;\n    let key = setEnviroments.key\n    if (this.state.uglyId) {\n      url += '/' + this.state.uglyId;\n    } else {\n      url += '?kodeverk=' + this.state.codeSystem + \"&kode=\" + this.state.code;\n    } \n    \n   \n\n    this.setState({ url: url });\n\n    fetch(url,\n      {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Ocp-Apim-Subscription-Key': key\n        }\n      }\n    )\n      .then(response => response.json())\n      .then(data => this.responseHandler(data));\n  }\n\n  responseHandler = (data) => {\n    if (data) {\n      this.setState({\n        response: JSON.stringify(data, null, 2)\n      });\n    }\n  }\n\n  myChangeHandler = (event) => {\n    this.setState({\n      uglyId: event.target.value\n    });\n  }\n  ChangeHandlerCode = (event) => {\n    this.setState({\n      code: event.target.value\n    });\n  }\n  ChangeHandlerCodeSystem = (event) => {\n    this.setState({\n      codeSystem: event.target.value\n    });\n  }\n  ChangeHandlerEnviroment = (event) => {\n    this.setState({\n      enviroment: event.target.value\n    \n    });\n  }\n\n /* renderJson() {\n    if (this.state.response) {\n      let json = JSON.parse(this.state.response);\n      console.log(json);\n\n      if (Array.isArray(json)) {\n        console.log(json);\n        return json.map((item, index) =>\n          <div key={index}>\n\n\n            <div><h1>{item.tittel}</h1></div>\n            <div dangerouslySetInnerHTML={{ __html: item.tekst }}></div>\n            <CollapsibleComponent name={item.id}> \n            {item.data.rasjonale != null ? <CollapsibleHead><h2>Rasjonale</h2></CollapsibleHead>:null} \n              <CollapsibleContent><div dangerouslySetInnerHTML={{ __html: item.data.rasjonale }}></div>\n              </CollapsibleContent>\n      \n              <CollapsibleHead><h2>Metadata</h2></CollapsibleHead>\n              <CollapsibleContent>\n                <table><tbody>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Id</td><td>{item.id ? item.id : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>intro</td><td>{item.intro ? item.id : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Owner</td><td>{item.eier ? item.eier : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>FirstPublicated</td><td>{item.forstPublisert ? item.forstPublisert : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>DokumentType</td><td>{item.dokumentType ? item.dokumentType : ''}</td>\n                  </tr>\n\n                </tbody></table>\n                </CollapsibleContent>\n                </CollapsibleComponent>\n\n          </div>);\n      } else {\n        //if object (checking)\n        let item = json;\n        console.log(Array.isArray(item));\n        console.log('object');\n\n        return (\n          <div>\n\n\n            <div><h1>{item.tittel}</h1></div>\n            <div dangerouslySetInnerHTML={{ __html: item.tekst }}></div>\n            <CollapsibleComponent>\n            {item.data.rasjonale != null ? <CollapsibleHead><h2>Rasjonale</h2></CollapsibleHead>:null} \n             <CollapsibleContent><div dangerouslySetInnerHTML={{ __html: item.data.rasjonale }}></div></CollapsibleContent>\n              <CollapsibleHead><h2>Metadata</h2></CollapsibleHead>\n              <CollapsibleContent>\n                <table><tbody>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Id</td><td>{item.id ? item.id : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Owner</td><td>{item.eier ? item.eier : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>FirstPublicated</td><td>{item.forstPublisert ? item.forstPublisert : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>intro</td><td>{item.intro ? item.intro : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>grouppeID</td><td>{item.gruppeId ? item.gruppeId : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Code system</td><td>{item.koder.ICPC - 2}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Code system</td><td>{item.koder.ICD - 10}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Technical data</td><td>{item.tekniskeData ? '' : 'none'}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Info Id</td><td>{(item.tekniskeData && item.tekniskeData.infoId) ? item.tekniskeData.infoId : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Info type</td><td>{(item.tekniskeData && item.tekniskeData.infoType) ? item.tekniskeData.infoType : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Subtype</td><td>{(item.tekniskeData && item.tekniskeData.subType) ? item.tekniskeData.subType : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>HAPI id</td><td>{(item.tekniskeData && item.tekniskeData.HapiId) ? item.tekniskeData.HapiId : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td colSpan=\"2\">{this.renderLinks(item.links)}</td>\n                  </tr>\n\n                </tbody></table>\n\n                <table><tbody>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Attachments</td><td>{item.attachments ? item.attachments : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Document type</td><td>{item.dokumentType ? item.dokumentType : ''}</td>\n                  </tr>\n\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>Last import to HAPI</td><td>{item.sistImportertTilHapi ? item.sistImportertTilHapi : ''}</td>\n                  </tr>\n\n                </tbody></table>\n              </CollapsibleContent>\n            </CollapsibleComponent>\n\n          </div>);\n      }\n    }\n    return '';\n  }*/\n\n\n /* renderLinks(links) {\n    return links.map((item, index) =>\n      <div key={index}>\n\n        <table><tbody>\n\n          <tr>\n            <td style={{ fontWeight: \"bold\" }}>Rel</td><td>{item.rel ? item.rel : ''}</td>\n          </tr>\n\n          <tr>\n            <td style={{ fontWeight: \"bold\" }}>Type</td><td>{item.type ? item.type : ''}</td>\n          </tr>\n\n          <tr>\n            <td>Href</td><td>{item.href ? item.href : ''}</td>\n          </tr>\n\n          <tr>\n            <td>Struktur Id</td><td>{item.strukturId ? item.strukturId : ''}</td>\n          </tr>\n\n\n        </tbody></table>\n\n      </div>);\n  }\n*/\n\n  render() {\n    return (\n      <div>\n\n        <HTMLRender/>\n        <RenderLinks/>\n        <Hanna/>\n       \n      \n        <form onSubmit={this.mySubmitHandler}>\n        <select name=\"enviroment\" id=\"enviroment\"\n            onChange={evt => this.ChangeHandlerEnviroment(evt)}\n          >\n         <option value=\"prod\">Production</option>\n            <option value=\"test\">Test</option>\n            <option value=\"qa\">QA</option>\n            \n          </select>\n          <p>Please provide either HAPI-id or code from a code system</p>\n          <input\n            id=\"id\"\n            type='text'\n            autoComplete=\"on\"\n            placeholder=\"HAPI-id\"\n            value={this.state.uglyId}\n            onChange={evt => this.myChangeHandler(evt)}\n          />\n\n          <span className=\"marginRight\">or</span>\n\n          <select name=\"codeSystem\" id=\"codeSystem\"\n            onChange={evt => this.ChangeHandlerCodeSystem(evt)}\n          >\n            <option value=\"\" select=\"default\">Choose code system</option>\n            <option value=\"ICD-10\">ICD-10</option>\n            <option value=\"ICPC-2\">ICPC-2</option>\n            <option value=\"ATC\">ATC</option>\n            <option value=\"SNOMED-CT\">SNOMED-CT</option>\n          </select>\n\n          <input\n            type='text'\n            autoComplete=\"on\"\n            id=\"code\"\n            placeholder=\"Code\"\n            value={this.state.code}\n            onChange={evt => this.ChangeHandlerCode(evt)}\n          />\n\n          <input\n            type='submit'\n            value=\"поиск\"\n          />\n        </form>\n\n        <div><pre>{this.state.response}</pre></div>\n        <div><pre><h4>{this.state.url}</h4></pre></div>\n\n      </div>\n    );\n  }\n\n}\n\nReactDOM.render(<MyPage />, document.getElementById('root'));\n\nreportWebVitals();"]},"metadata":{},"sourceType":"module"}